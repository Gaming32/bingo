plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-neoforge:0.3.1"))

    // TODO: Verify dependencies
//    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-neoforge:12.0.652")
//    modRuntimeOnly("mezz.jei:jei-1.20.1-neoforge:15.2.0.27")
//    modRuntimeOnly("dev.emi:emi-neoforge:1.0.19+1.20.1")

    modImplementation(include("me.shedaniel.cloth:cloth-config-neoforge:12.0.111"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

shadowJar {
    exclude("bingo-common-refmap.json")
}

// TODO: Update this when Arch Loom is fixed
remapJar {
    atAccessWideners.add("bingo.accessWidener")
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}
